📌 Project: CreatorQuizManager – Arabic Language Full Localization Fix  
Platform: React (Replit) – Live App

🛠️ GOAL:
Ensure that when Arabic is selected, **the entire application experience is 100% in Arabic**, including:

✅ UI Components (buttons, labels, navbars, footers)  
✅ Dynamic content (quiz titles, categories, descriptions, score summaries)  
✅ Backend content (quiz names, result stats, server responses)  
✅ Cached or previously viewed content  
✅ Tooltips, error messages, modals, etc.  
✅ Static info (like *“Created by 42 participants”*, *“Coming Soon…”*)  
✅ Footer sections (Contact, Terms, Privacy, Connect…)

🎯 REQUIREMENTS:

1. ✅ All visible frontend text must be sourced via `react-i18next` or equivalent translation keys (no hardcoded English)
2. ✅ All static and dynamic content should support localization via i18n-compatible keys (e.g. use `t("quiz.title.reactBasics")`)
3. ✅ For backend content:
   - Implement multilingual support for quiz objects
   - Store translations per language, or use i18n-compatible APIs
4. ✅ Use locale-specific caching: when Arabic is selected, fetch or display Arabic-labeled data
5. ✅ Clear browser cache or local storage data when switching language to avoid stale English data appearing
6. ✅ Check and update all metadata (like page `<title>` or `<meta description>`) to reflect the correct language

💬 Example of what's wrong:
- Text like "React Fundamentals", "Documentation", and "Score Distribution" remains in English.
- Even after switching to Arabic, backend-rendered or cached English data is still visible.
- These must be completely replaced with proper Arabic alternatives.

🧠 Note:
This is not only a UI issue. It is a **content integrity + data localization issue**.  
Please treat Arabic as a **primary target language** — not an afterthought.

🛑 No English or Latin-based text should be visible when `i18n.language === 'ar'`.  
Everything must be rendered in native, readable, properly translated Arabic.

---

📂 Checklist:

- [ ] UI components are wrapped with `t()` or useTranslation
- [ ] All hardcoded strings removed
- [ ] Dynamic data is properly translated
- [ ] Server-side or Firestore data is localized (if applicable)
- [ ] LocalStorage/sessionStorage/cache is language-specific
- [ ] Fallbacks for missing translations handled gracefully
- [ ] RTL direction applied to all layouts
- [ ] Proper Arabic fonts (like `Tajawal`, `Cairo`) used consistently
- [ ] SEO metadata is updated when language changes
- [ ] Mobile + desktop Arabic layout reviewed for consistency

---

🎁 Bonus Suggestion:
Use a `useArabicLocale()` hook or language context to:

- Force all dynamic content loading through Arabic-specific endpoints or localized keys
- Automatically adjust direction, font, layout, and content rendering in one place
